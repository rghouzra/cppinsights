#define INSIGHTS_USE_TEMPLATE

template <typename T>
class Foo{
public:
    Foo() = default;

protected:
    bool Mo() { return false; }
};

/* First instantiated from: ClassTemplateTest.cpp:12 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
class Foo<int>
{
  
  public: 
  inline constexpr Foo() noexcept = default;
  
  protected: 
  inline bool Mo()
  {
    return false;
  }
  
  public: 
  // inline ~Foo() = default;
  // inline constexpr Foo(const Foo<int> &) = default;
  // inline constexpr Foo(Foo<int> &&) = default;
};

#endif


class Bar : public Foo<int>
{
  
  public: 
  inline bool Do()
  {
    return /* static_cast<Foo<int> *>(this)-> */ Mo();
  }
  
  // inline constexpr Bar() noexcept = default;
  // inline constexpr Bar(const Bar &) = default;
  // inline constexpr Bar(Bar &&) = default;
};




int main()
{
  Bar bar = Bar();
  bar.Do();
}


