#include <utility>


class C
{
  
  public: 
  int i;
  inline virtual ~C() noexcept = default;
  // inline C & operator=(const C &) = default;
  // inline constexpr C(const C &) noexcept = default;
  // inline C() noexcept = default;
};



class C2
{
  
  public: 
  const int i{2};
  inline constexpr C2() = default;
};




class D : public C
{
  
  public: 
  int x;
  // inline constexpr D(const D &) = default;
  // inline constexpr D(D &&) = default;
  // inline D & operator=(const D &) = default;
  // inline D & operator=(D &&) = default;
  // inline virtual ~D() noexcept = default;
};




int main()
{
  C c = C{};
  C c2 = C(c);
  C c3 = C(std::move(c));
}

