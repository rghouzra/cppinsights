#define INSIGHTS_USE_TEMPLATE
// source: https://en.cppreference.com/w/cpp/language/variable_template

template<class T>
constexpr T pi = T(3.1415926535897932385L);

template<>
constexpr const int pi<int> = int(static_cast<int>(3.14159265358979323851L));

 
template<class T>
T circular_area(T r)
{
    return pi<T> * r * r;
}

#ifdef INSIGHTS_USE_TEMPLATE_INNER
/* First instantiated from: VarTemplateDecl3Test.cpp:33 */
template<>
int circular_area<int>(int r)
{
  return pi<int> * r * r;
}
#endif


template<typename T>
struct X
{
   T x;
   T y;
};

#ifdef INSIGHTS_USE_TEMPLATE
/* First instantiated from: VarTemplateDecl3Test.cpp:30 */
template<>
struct X<int>
{
  int x;
  int y;
  // inline ~X() noexcept = default;
};

#endif


template<typename T>
X<T> DoIt(T x)
{
    return { circular_area(x), circular_area(x+2)};
}

#ifdef INSIGHTS_USE_TEMPLATE_INNER
/* First instantiated from: VarTemplateDecl3Test.cpp:30 */
template<>
X<int> DoIt<int>(int x)
{
  return {circular_area(x), circular_area(x + 2)};
}
#endif


int main()
{
  int x = 1;
  X<int> __DoIt30 = DoIt(x);
  int& a = __DoIt30.x;
  int& b = __DoIt30.y;
  return circular_area(x);
}


