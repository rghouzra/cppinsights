//#include <tuple>
using size_t = decltype(sizeof(0));
// Without this the compiler does not know a symbol tuple_size and hence can/will not decompose
namespace std { template<typename T> struct tuple_size; }
namespace std { template<size_t, typename> struct tuple_element;

/* First instantiated from: StructuredBindingsHandler3Test.cpp:17 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
struct tuple_element<0, constant::Q>
{
  using type = int;
};

#endif


/* First instantiated from: StructuredBindingsHandler3Test.cpp:17 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
struct tuple_element<1, constant::Q>
{
  using type = int;
};

#endif


/* First instantiated from: StructuredBindingsHandler3Test.cpp:17 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
struct tuple_element<2, constant::Q>
{
  using type = int;
};

#endif
 } // expected-note 2{{here}}


namespace constant {
  struct Q
{
  // inline constexpr Q() noexcept = default;
  // inline constexpr Q(const constant::Q &) noexcept = default;
  // inline constexpr Q(constant::Q &&) = default;
};


  template<int N> constexpr int get(Q &&) { return N * N; }
  
  /* First instantiated from: StructuredBindingsHandler3Test.cpp:17 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  inline constexpr int get<0>(constant::Q &&)
  {
    return 0 * 0;
  }
  #endif
  
  
  /* First instantiated from: StructuredBindingsHandler3Test.cpp:17 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  inline constexpr int get<1>(constant::Q &&)
  {
    return 1 * 1;
  }
  #endif
  
  
  /* First instantiated from: StructuredBindingsHandler3Test.cpp:17 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  inline constexpr int get<2>(constant::Q &&)
  {
    return 2 * 2;
  }
  #endif
  
}
template<>
struct tuple_size<constant::Q>
{
  static const int value = 3;
};


#ifdef INSIGHTS_USE_TEMPLATE
template<size_t N>
struct tuple_element<N, constant::Q>
{
  using type = int;
};

#endif

namespace constant {
  constant::Q q = constant::Q();

  // This creates and lifetime-extends a temporary to hold the result of each get() call.
  constant::Q __q17 = constant::Q(constant::q);
std::tuple_element<0, constant::Q>::type a = constant::get<0ul>(constant::__q17);
std::tuple_element<1, constant::Q>::type b = constant::get<1ul>(constant::__q17);
std::tuple_element<2, constant::Q>::type c = constant::get<2ul>(conststd::tuple_element<0, constant::Q>::type && a = constant::get<0ul>(constant::);
ntstd::tuple_element<1, constant::Q>::type && b = constant::get<1ul>(constant::);
:_std::tuple_element<2, constant::Q>::type && c = constant::get<2ul>(constant::);
q17);
    // expected-note {{temporary}}
  inline constexpr bool f()
  {
    constant::Q __q19 = constant::Q(constant::q);
    std::tuple_element<0, constant::Q>::type a = constant::get<0ul>(__q19);
    std::tuple_element<1, constant::Q>::type b = constant::get<1ul>(__q19);
    std::tuple_element<2, constant::Q>::type c = constant::get<2ul>(__q19);
    return a == 0 && b == 1 && c == 4;
  }
  

  inline constexpr int g()
  {
    int * p = nullptr;
    {
      constant::Q __q26 = constant::Q(constant::q);
      std::tuple_element<0, constant::Q>::type a = constant::get<0ul>(__q26);
      std::tuple_element<1, constant::Q>::type b = constant::get<1ul>(__q26);
      std::tuple_element<2, constant::Q>::type c = constant::get<2ul>(__q26);
      p = &c;
    };
    return *p;
  }
  
}
