struct S
{
  void f();
  
  // inline ~S() noexcept = default;
};


struct T
{
  // inline ~T() noexcept = default;
};



template <typename T>
auto f(T, int) -> decltype(T{}.f()) {
    //printf( "Has member function named f().\n");
}

#ifdef INSIGHTS_USE_TEMPLATE_INNER
/* First instantiated from: AutoHandler3Test.cpp:15 */
template<>
void f<S>(S, int)
{
}
#endif


template <typename T>
void f(T, ...) {
    //printf( "No member function named f().\n");
}

#ifdef INSIGHTS_USE_TEMPLATE_INNER
/* First instantiated from: AutoHandler3Test.cpp:16 */
template<>
void f<T>(T, ...)
{
}
#endif


int main()
{
  f(S{}, 0);
  f(T{}, 0);
}

