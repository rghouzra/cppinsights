#define INSIGHTS_USE_TEMPLATE
#include <utility>

struct Test
{
  // inline constexpr Test() noexcept = default;
  // inline constexpr Test(const Test &) = default;
  // inline constexpr Test(Test &&) = default;
};



template<class T>
void foo(T&& t)
{
}

/* First instantiated from: Issue50_2.cpp:16 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
void foo<Test &>(Test & t)
{
}
#endif


/* First instantiated from: Issue50_2.cpp:19 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
void foo<int &>(int & t)
{
}
#endif


/* First instantiated from: Issue50_2.cpp:22 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
void foo<long>(long && t)
{
}
#endif


int main()
{
  Test test = Test();
  foo(test);
  int i = 0;
  foo(i);
  long l;
  foo(std::move(l));
}

