template<class... Ts> struct visitor: Ts... { using Ts::operator()...; };

#ifdef INSIGHTS_USE_TEMPLATE
/* First instantiated from: VisitorTest.cpp:7 */
template<>
struct visitor<__lambda_8_7, __lambda_9_7> : public __lambda_8_7, public __lambda_9_7
{
  using visitor<__lambda_8_7, __lambda_9_7>::operator();
  using visitor<__lambda_8_7, __lambda_9_7>::operator();
  // inline constexpr visitor<__lambda_8_7, __lambda_9_7> & operator=(visitor<__lambda_8_7, __lambda_9_7> &&) = default;
  // inline ~visitor() noexcept = default;
};

#endif

template<class... Ts> visitor(Ts...) -> visitor<Ts...>;


int main()
{
    
  class __lambda_8_7
  {
    public: inline /*constexpr */ void operator()(int value) const
    {
    }
    
    // public: inline /*constexpr */ __lambda_8_7 & operator=(const __lambda_8_7 &) = default;
    // public: inline /*constexpr */ __lambda_8_7(const __lambda_8_7 &) = default;
    // public: inline /*constexpr */ __lambda_8_7(__lambda_8_7 &&) noexcept = default;
    
  };
  
  
  class __lambda_9_7
  {
    public: inline /*constexpr */ void operator()(const char * value) const
    {
    }
    
    // public: inline /*constexpr */ __lambda_9_7 & operator=(const __lambda_9_7 &) = default;
    // public: inline /*constexpr */ __lambda_9_7(const __lambda_9_7 &) = default;
    // public: inline /*constexpr */ __lambda_9_7(__lambda_9_7 &&) noexcept = default;
    
  };
  
  visitor<__lambda_8_7, __lambda_9_7> my_visitor = visitor{__lambda_8_7(__lambda_8_7{}), __lambda_9_7(__lambda_9_7{})};
  static_cast<const __lambda_9_7&>(my_visitor).operator()("hello");
  static_cast<const __lambda_8_7&>(my_visitor).operator()(2);
}

