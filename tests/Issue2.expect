#include <utility>

struct Movable
{
  inline Movable()
  {
  }
  
  inline Movable(Movable && other)
  {
  }
  
  inline Movable & operator=(Movable && other)
  {
    return *this;
  }
  
  // inline Movable(const Movable &) = delete;
  // inline Movable & operator=(const Movable &) = delete;
  // inline ~Movable() noexcept = default;
};



int main()
{
  Movable m = Movable();
  int e;
    
  class __lambda_20_16
  {
    Movable x;
    int c;
    public: 
    inline /*constexpr */ void operator()() const
    {
    }
    
    // inline __lambda_20_16(const __lambda_20_16 &) = default;
    // inline __lambda_20_16(__lambda_20_16 &&) = default;
    public: __lambda_20_16(Movable _x, int _c)
    : x{_x}
, c{_c}
    {}
    
  };
  
  __lambda_20_16 fun = __lambda_20_16{Movable(std::move(m)), e};
  fun.operator()();
    
  class __lambda_24_16
  {
    int c;
    public: 
    inline /*constexpr */ void operator()() const
    {
    }
    
    public: __lambda_24_16(int _c)
    : c{_c}
    {}
    
  };
  
  __lambda_24_16 bun = __lambda_24_16{std::move(e)};
  bun.operator()();
}

