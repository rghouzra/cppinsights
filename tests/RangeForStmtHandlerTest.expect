#include <cstdio>
#include <algorithm>
#include <vector>

struct A
{
  inline A()
  {
    int i = 0;
        
    class __lambda_10_38
    {
      int & i;
      public: 
      inline /*constexpr */ int operator()() const
      {
        return ++i;
      }
      
      public: __lambda_10_38(int & _i)
      : i{_i}
      {}
      
    };
    
    std::generate(&this->v[0], &this->v[10], __lambda_10_38{i});
  }
  
  int v[10];
  // inline constexpr A(const A &) = default;
  // inline constexpr A(A &&) = default;
};




struct B
{
  inline B()
  {
    int i = 0;
        
    class __lambda_22_38
    {
      int & i;
      public: 
      inline /*constexpr */ int operator()() const
      {
        return ++i;
      }
      
      public: __lambda_22_38(int & _i)
      : i{_i}
      {}
      
    };
    
    std::generate(&this->v[0], &this->v[10], __lambda_22_38{i});
  }
  
  inline bool operator!=(const B & rhs)
  {
    return this != &rhs;
  }
  
  inline int * begin()
  {
    return &this->v[0];
  }
  
  inline int * end()
  {
    return &this->v[10];
  }
  
  int v[10];
  // inline constexpr B(const B &) = default;
  // inline constexpr B(B &&) = default;
};



int * begin(A & v)
{
  return &v.v[0];
}


int * end(A & v)
{
  return &v.v[10];
}


int main()
{
  char arr[10] = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20};
  {
    char (&__range1)[10] = arr;
    char * __begin1 = __range1;
    char * __end1 = __range1 + 10l;
    for(; __begin1 != __end1; ++__begin1) 
    {
      char c = *__begin1;
      printf("%#x\n", static_cast<int>(c));
      c++;
      printf("%#x\n", static_cast<int>(c));
    }
    
  }
  std::vector<int> v = std::vector<int, std::allocator<int> >{std::initializer_list<int>{1, 2, 3, 5}};
  {
    std::vector<int, std::allocator<int> > & __range1 = v;
    std::__wrap_iter<int *> __begin1 = __range1.begin();
    std::__wrap_iter<int *> __end1 = __range1.end();
    for(; std::operator!=(__begin1, __end1); __begin1.operator++()) 
    {
      int & vv = __begin1.operator*();
      printf("%d\n", vv);
    }
    
  }
  {
    std::vector<int, std::allocator<int> > & __range1 = v;
    std::__wrap_iter<int *> __begin1 = __range1.begin();
    std::__wrap_iter<int *> __end1 = __range1.end();
    for(; std::operator!=(__begin1, __end1); __begin1.operator++()) 
    {
      int & v2 = __begin1.operator*();
      printf("%d\n", v2);
    }
    
  }
  A a = A();
  {
    A & __range1 = a;
    int * __begin1 = begin(__range1);
    int * __end1 = end(__range1);
    for(; __begin1 != __end1; ++__begin1) 
    {
      int it = *__begin1;
      printf("%d\n", it);
    }
    
  }
  B b = B();
  {
    B & __range1 = b;
    int * __begin1 = __range1.begin();
    int * __end1 = __range1.end();
    for(; __begin1 != __end1; ++__begin1) 
    {
      int bit = *__begin1;
      printf("%d\n", bit);
    }
    
  }
}

