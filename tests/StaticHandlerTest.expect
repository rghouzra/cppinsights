#include <new> // for thread-safe static's placement new
#include <cstdio>
#include <cstring>
#include <new> // need this for after the transformation when a placement new is used

class Singleton
{
  
  public: 
  static Singleton & Instance();
  
  inline int Get() const
  {
    return this->mX;
  }
  
  inline void Set(int x)
  {
    this->mX = x;
  }
  
  
  private: 
  inline Singleton() noexcept = default;
  inline ~Singleton() noexcept
  {
  }
  
  int mX;
  public: 
  // inline constexpr Singleton(const Singleton &) = default;
};




static size_t counter = 0;


Singleton& Singleton::Instance()
{
  static Singleton singleton;

  static bool passed = true;

  return singleton;
}


class Bingleton
{
  
  public: 
  inline int Get() const
  {
    return this->mX;
  }
  
  inline void Set(int x)
  {
    this->mX = x;
  }
  
  inline Bingleton() noexcept = default;
  inline ~Bingleton() noexcept
  {
  }
  
  
  private: 
  int mX;
  public: 
  // inline constexpr Bingleton(const Bingleton &) = default;
};




void B()
{
  static uint64_t __bbGuard;
  alignas(Bingleton) static char __bb[sizeof(Bingleton)];
  
  if( ! __bbGuard )
  {
    if( __cxa_guard_acquire(&__bbGuard) )
    {
      new (&__bb) Bingleton();
      __bbGuard = true;
      __cxa_guard_release(&__bbGuard);
    }
  }
}


Bingleton * B(bool c)
{
  static uint64_t __bbGuard;
  alignas(Bingleton) static char __bb[sizeof(Bingleton)];
  
  if( ! __bbGuard )
  {
    if( __cxa_guard_acquire(&__bbGuard) )
    {
      new (&__bb) Bingleton();
      __bbGuard = true;
      __cxa_guard_release(&__bbGuard);
    }
  }
  if(c) {
    return nullptr;
  }
  
  return &*reinterpret_cast<Bingleton*>(__bb);
}



Bingleton & BB(bool c)
{
  static uint64_t __bbGuard;
  alignas(Bingleton) static char __bb[sizeof(Bingleton)];
  
  if( ! __bbGuard )
  {
    if( __cxa_guard_acquire(&__bbGuard) )
    {
      new (&__bb) Bingleton();
      __bbGuard = true;
      __cxa_guard_release(&__bbGuard);
    }
  }
  if(c) {
    return *reinterpret_cast<Bingleton*>(__bb);
  }
  
  return *reinterpret_cast<Bingleton*>(__bb);
}



int main()
{
  Singleton & s = Singleton::Instance();
  s.Set(22);
  B();
  Bingleton * bb = B(false);
  Bingleton & b2 = BB(true);
  return s.Get();
}

