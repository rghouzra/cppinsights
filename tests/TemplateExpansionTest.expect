template <template <typename> class... Templates>
struct template_tuple {};

#ifdef INSIGHTS_USE_TEMPLATE
/* First instantiated from: TemplateExpansionTest.cpp:9 */
template<>
struct template_tuple<identity>
{
  // inline ~template_tuple() noexcept = default;
};

#endif

template <typename T>
struct identity {};
template <template <typename> class... Templates>
template_tuple<Templates...> f7() {}

#ifdef INSIGHTS_USE_TEMPLATE_INNER
/* First instantiated from: TemplateExpansionTest.cpp:9 */
template<>
template_tuple<identity> f7<identity>()
{
}
#endif


void foo2()
{
  f7<identity>();
}



  template<typename> class A { };
  template<template<typename> class ...> class B { };
  
  #ifdef INSIGHTS_USE_TEMPLATE
  /* First instantiated from: TemplateExpansionTest.cpp:27 */
  template<>
  class B<Test, Test>
  {
    // inline constexpr B() noexcept = default;
    // inline ~B() = default;
    // inline constexpr B(const B<Test, Test> &) = default;
    // inline constexpr B(B<Test, Test> &&) = default;
  };
  
  #endif
  
  int foo();
  

  template<typename> class testType { };
  
  #ifdef INSIGHTS_USE_TEMPLATE
  /* First instantiated from: TemplateExpansionTest.cpp:43 */
  template<>
  class testType<int>
  {
    // inline constexpr testType() noexcept = default;
    // inline constexpr testType(const testType<int> &) = default;
    // inline constexpr testType(testType<int> &&) = default;
  };
  
  #endif
  

  template<int fp(void)> class testDecl { };
  
  #ifdef INSIGHTS_USE_TEMPLATE
  /* First instantiated from: TemplateExpansionTest.cpp:45 */
  template<>
  class testDecl<&foo>
  {
  };
  
  #endif
  
  
  #ifdef INSIGHTS_USE_TEMPLATE
  /* First instantiated from: TemplateExpansionTest.cpp:46 */
  template<>
  class testDecl<int (*)()>
  {
  };
  
  #endif
  

  template<int> class testIntegral { };
  
  #ifdef INSIGHTS_USE_TEMPLATE
  /* First instantiated from: TemplateExpansionTest.cpp:48 */
  template<>
  class testIntegral<2>
  {
    // inline constexpr testIntegral() noexcept = default;
    // inline constexpr testIntegral(const testIntegral<2> &) = default;
    // inline constexpr testIntegral(testIntegral<2> &&) = default;
  };
  
  #endif
  

  template<template<typename> class> class testTemplate { };
  

#ifdef INSIGHTS_USE_TEMPLATE
/* First instantiated from: TemplateExpansionTest.cpp:24 */
template<>
class testTemplate<A>
{
};

#endif



  template<template<typename> class ...T> class C {
    B<T...> testTemplateExpansion;
  };
  
  #ifdef INSIGHTS_USE_TEMPLATE
  /* First instantiated from: TemplateExpansionTest.cpp:41 */
  template<>
  class C<Test, Test>
  {
    B<Test, Test> testTemplateExpansion;
    // inline constexpr C() noexcept = default;
    // inline constexpr C(const C<Test, Test> &) = default;
    // inline constexpr C(C<Test, Test> &&) = default;
  };
  
  #endif
  

  template<int, int = 0> class testExpr{};
  
  #ifdef INSIGHTS_USE_TEMPLATE
  /* First instantiated from: TemplateExpansionTest.cpp:50 */
  template<>
  class testExpr<4, 1>
  {
    // inline constexpr testExpr() noexcept = default;
    // inline constexpr testExpr(const testExpr<4, 1> &) = default;
    // inline constexpr testExpr(testExpr<4, 1> &&) = default;
  };
  
  #endif
  

  template<int, int ...> class testPack { };
  
  #ifdef INSIGHTS_USE_TEMPLATE
  /* First instantiated from: TemplateExpansionTest.cpp:52 */
  template<>
  class testPack<0, 1, 2, 4>
  {
    // inline constexpr testPack() noexcept = default;
    // inline constexpr testPack(const testPack<0, 1, 2, 4> &) = default;
    // inline constexpr testPack(testPack<0, 1, 2, 4> &&) = default;
  };
  
  #endif
  


template<typename T>
struct Test {};

int main()
{
  C<Test, Test> te = C<Test, Test>();
  testType<int> type = testType<int>();
  testDecl<foo> a = {};
  testDecl<nullptr> b = {};
  testIntegral<2> integral = testIntegral<2>();
  testExpr<2 * 2, 1> expr = testExpr<4, 1>();
  testPack<0, 1, 2, 4> pack = testPack<0, 1, 2, 4>();
}


