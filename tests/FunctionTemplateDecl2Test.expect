class Test
{
  
  public: 
  inline constexpr Test() noexcept = default;
  template<typename T2>
  inline Test & operator=(const T2 & other)
  {
    return *this;
  }
  
  /* First instantiated from: FunctionTemplateDecl2Test.cpp:19 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  inline Test & operator=<int>(const int & other)
  {
    return *this;
  }
  #endif
  
  
  /* First instantiated from: FunctionTemplateDecl2Test.cpp:21 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  inline Test & operator=<char>(const char & other)
  {
    return *this;
  }
  #endif
  
  // inline constexpr Test(const Test &) = default;
  // inline constexpr Test(Test &&) = default;
  // inline constexpr Test & operator=(const Test &) = default;
  // inline constexpr Test & operator=(Test &&) = default;
};



int main()
{
  Test ti = Test();
  Test tc = Test();
  ti.operator=(2);
  tc.operator=('a');
}

