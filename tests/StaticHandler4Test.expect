#include <new> // for thread-safe static's placement new
void X() noexcept(false)
{
  throw ;
}


class Sing
{
  
  public: 
  inline Sing()
  {
    X();
  }
  
  // inline constexpr Sing(const Sing &) = default;
  // inline constexpr Sing(Sing &&) = default;
};



Sing & Test()
{
  static uint64_t __sGuard;
  alignas(Sing) static char __s[sizeof(Sing)];
  
  if( ! __sGuard )
  {
    if( __cxa_guard_acquire(&__sGuard) )
    {
      try
      {
        new (&__s) Sing();
        __sGuard = true;
      }
      catch(...)
      {
        __cxa_guard_abort(&__sGuard);
        throw;
      }
      
      __cxa_guard_release(&__sGuard);
    }
  }
  return *reinterpret_cast<Sing*>(__s);
}

