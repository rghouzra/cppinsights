template<typename T>
int Test(T&& t)
{
    return t();
}

/* First instantiated from: LambdaHandler8Test.cpp:9 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
int Test<__lambda_9_18>(__lambda_9_18 && t)
{
  return t.operator()();
}
#endif


int get(int & v)
{
      
  class __lambda_9_18
  {
    int & v;
    public: 
    inline /*constexpr */ int operator()() const
    {
      return v;
    }
    
    public: __lambda_9_18(int & _v)
    : v{_v}
    {}
    
  };
  
  int x = Test(__lambda_9_18{v});
  return x;
}



int main()
{
  int x = 2;
  return get(x);
}

