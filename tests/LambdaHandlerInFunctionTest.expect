#include <cstdio>

template<typename T>
void Test(T&& t)
{
}

/* First instantiated from: LambdaHandlerInFunctionTest.cpp:10 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
void Test<__lambda_10_10>(__lambda_10_10 && t)
{
}
#endif


/* First instantiated from: LambdaHandlerInFunctionTest.cpp:12 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
void Test<int>(int && t)
{
}
#endif


int main()
{
    
  class __lambda_10_10
  {
    public: 
    inline /*constexpr */ void operator()() const
    {
      printf("Hello");
    }
    
    using retType_10_10 = auto (*)() -> void;
    inline /*constexpr */ operator retType_10_10 () const
    {
      return __invoke;
    };
    
    private: 
    static inline void __invoke()
    {
      printf("Hello");
    }
    
    
  };
  
  Test(__lambda_10_10{});
      
  class __lambda_12_10
  {
    public: 
    inline /*constexpr */ int operator()() const
    {
      printf("Bello");
      return 1;
    }
    
    using retType_12_10 = auto (*)() -> int;
    inline /*constexpr */ operator retType_12_10 () const
    {
      return __invoke;
    };
    
    private: 
    static inline int __invoke()
    {
      printf("Bello");
      return 1;
    }
    
    
  } __lambda_12_10{};
  
  Test(__lambda_12_10.operator()());
}

