#define INSIGHTS_USE_TEMPLATE

#include <chrono>
#include <string>

std::chrono::duration<long long, std::ratio<1, 1> > operator""_s(unsigned long long s)
{
  return std::chrono::duration<long long, std::ratio<1, 1> >(s, 0);
}


std::basic_string<char> operator""_str(const char * s, std::size_t len)
{
  return std::basic_string<char>(s, len);
}


template<char... _Digits>
constexpr int operator""_cs()
{
    return 0;
}

/* First instantiated from: Issue15.cpp:38 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
inline constexpr int operator""_cs<52, 53, 54, 55>()
{
  return 0;
}
#endif


template<typename T, T... C>
constexpr int operator""_x()
{
    return 0;
}

/* First instantiated from: Issue15.cpp:33 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
inline constexpr int operator""_x<char, 49, 50, 51, 52, 53>()
{
  return 0;
}
#endif


int main()
{
  using namespace std::literals;
  std::chrono::seconds t = std::operator""s(98291919ull);
  int t4 = operator""_x<char, 49, 50, 51, 52, 53>();
  std::basic_string<char> str = operator""_str("abcd", 4ul);
  std::chrono::duration<long long, std::ratio<1, 1> > sec = operator""_s(4ull);
  int cookedTemplateLiteral = operator""_cs<'4', '5', '6', '7'>();
}

