template<int... Ints>
constexpr int fold_minus_impl() {
    return (Ints - ... - 5);
}

#ifdef INSIGHTS_USE_TEMPLATE_INNER
/* First instantiated from: Issue91.cpp:8 */
template<>
inline constexpr int fold_minus_impl<0>()
{
  return 0 - 5;
}
#endif


#ifdef INSIGHTS_USE_TEMPLATE_INNER
/* First instantiated from: Issue91.cpp:8 */
template<>
inline constexpr int fold_minus_impl<0, 0>()
{
  return 0 - (0 - 5);
}
#endif


template<int... Ints>
constexpr int fold_minus() {
    return fold_minus_impl<0, Ints...>();
}

#ifdef INSIGHTS_USE_TEMPLATE_INNER
/* First instantiated from: Issue91.cpp:11 */
template<>
inline constexpr int fold_minus<>()
{
  return fold_minus_impl<0>();
}
#endif


#ifdef INSIGHTS_USE_TEMPLATE_INNER
/* First instantiated from: Issue91.cpp:16 */
template<>
inline constexpr int fold_minus<0>()
{
  return fold_minus_impl<0, 0>();
}
#endif


/* PASSED: static_assert(fold_minus() == -5); */


template <int b>
class print_int;

int i = fold_minus<0>();

/* PASSED: static_assert(fold_minus<0>() == 5); */

/* PASSED: static_assert(0 - 0 - 5 == -5); */


//print_int<fold_minus<0>()> p;
