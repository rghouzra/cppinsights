#include <cstdio>
#include <iostream>
#include <string>
#include <tuple>
#include <utility>

using namespace std;

class Point;

template<>
struct std::tuple_size<Point> : public std::integral_constant<unsigned long, 2>
{
};


template<>
struct std::tuple_element<0, Point>
{
  using type = double;
};


template<>
struct std::tuple_element<1, Point>
{
  using type = double;
};



class Point
{
  
  public: 
  inline constexpr Point(double x, double y) noexcept
  : mX{x}
  , mY{y}
  {
  }
  
  inline constexpr double GetX() const noexcept
  {
    return this->mX;
  }
  
  inline constexpr double GetY() const noexcept
  {
    return this->mY;
  }
  
  inline constexpr void SetX(double x) noexcept
  {
    this->mX = x;
  }
  
  inline constexpr void SetY(double y) noexcept
  {
    this->mY = y;
  }
  
  
  private: 
  double mX;
  double mY;
  
  public: 
  template<size_t N>
  inline constexpr decltype(auto) get() const noexcept
  {
    if constexpr(N == 1) {
      return this->GetX();
    } else /* constexpr */ {
      if constexpr(N == 0) {
        return this->mY;
      }
      
      
    }
    
  }
  
  /* First instantiated from: StructuredBindingsHandler6Test.cpp:58 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  inline constexpr double get<0>() const noexcept
  {
    if constexpr(0ul == 1) ;
    else /* constexpr */ {
      if constexpr(0ul == 0) {
        return this->mY;
      }
      
      
    }
    
  }
  #endif
  
  
  /* First instantiated from: StructuredBindingsHandler6Test.cpp:58 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  inline constexpr double get<1>() const noexcept
  {
    if constexpr(1ul == 1) {
      return this->GetX();
    }
    
  }
  #endif
  
  // inline constexpr Point(const Point &) noexcept = default;
  // inline constexpr Point(Point &&) = default;
  // inline ~Point() noexcept = default;
};



int main()
{
  Point p = Point{1, 2};
  Point __p58 = Point(p);
  std::tuple_element<0, Point>::type x = __p58.get<0>();
  std::tuple_element<1, Point>::type y = __p58.get<1>();
  printf("x:%lf y:%lf\n", p.GetX(), p.GetY());
  printf("x:%lf y:%lf\n", x, y);
  char ar[2] = {7, 8};
  char __ar64[2] = {ar[0], ar[1]};
  char a1 = __ar64[0];
  char a2 = __ar64[1];
  char (&__ar65)[2] = ar;
  char& a4 = __ar65[0];
  char& a5 = __ar65[1];
  printf("%d %d\n", static_cast<int>(a4), static_cast<int>(a5));
  ++a4;
  --a5;
  printf("%d %d\n", static_cast<int>(a4), static_cast<int>(a5));
  char const (&__ar72)[2] = ar;
  const char& a8 = __ar72[0];
  const char& a9 = __ar72[1];
  const char aa[2] = {1, 2};
  char const (&__aa75)[2] = aa;
  const char& a18 = __aa75[0];
  const char& a19 = __aa75[1];
  std::tuple<int, char, double> muple = std::make_tuple(1, 'a', 2.2999999999999998);
  std::tuple<int, char, double> & __muple80 = muple;
  std::tuple_element<0, std::tuple<int, char, double> >::type& i = std::get<0ul>(__muple80);
  std::tuple_element<1, std::tuple<int, char, double> >::type& c = std::get<1ul>(__muple80);
  std::tuple_element<2, std::tuple<int, char, double> >::type& d = std::get<2ul>(__muple80);
  std::tuple<int, char, double> __muple82 = std::tuple<int, char, double>(muple);
  std::tuple_element<0, std::tuple<int, char, double> >::type& ii = std::get<0ul>(__muple82);
  std::tuple_element<1, std::tuple<int, char, double> >::type& cc = std::get<1ul>(__muple82);
  std::tuple_element<2, std::tuple<int, char, double> >::type& dd = std::get<2ul>(__muple82);
}

