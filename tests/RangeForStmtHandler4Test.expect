#define INSIGHTS_USE_TEMPLATE

// https://mbevin.wordpress.com/2012/11/14/range-based-for/
template<class T>
class MyArrayWrapper {
   T* data;
   int size;

public:
   int* begin() { return size>0 ? &data[0] : nullptr; }
   int* end()   { return size>0 ? &data[size-1] : nullptr; }
};

/* First instantiated from: RangeForStmtHandler4Test.cpp:16 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
class MyArrayWrapper<int>
{
  int * data;
  int size;
  
  public: 
  inline int * begin()
  {
    return this->size > 0 ? &this->data[0] : nullptr;
  }
  
  inline int * end()
  {
    return this->size > 0 ? &this->data[this->size - 1] : nullptr;
  }
  
  // inline MyArrayWrapper() noexcept = default;
  // inline constexpr MyArrayWrapper(const MyArrayWrapper<int> &) = default;
  // inline constexpr MyArrayWrapper(MyArrayWrapper<int> &&) = default;
};

#endif



int main()
{
  MyArrayWrapper<int> arr = MyArrayWrapper<int>();
  {
    MyArrayWrapper<int> & __range1 = arr;
    int * __begin1 = __range1.begin();
    int * __end1 = __range1.end();
    for(; __begin1 != __end1; ++__begin1) 
    {
      int i = *__begin1;
    }
    
  }
}

