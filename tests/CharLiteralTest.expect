template<typename BT>
struct Foo
{
    BT raw;

    Foo()             = default;
    Foo(const Foo& v) = default;
    constexpr Foo(BT v)
    : BT(v)
    {
    }
    constexpr operator BT() const { return this->raw; }
    Foo&      operator=(const Foo& rhs) = default;

    Foo& operator=(BT v)
    {
        this->raw = v;
        return *this;
    }
    void operator=(BT v) volatile { this->raw = v; }
};

/* First instantiated from: CharLiteralTest.cpp:61 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
struct Foo<int>
{
  int raw;
  inline Foo() noexcept = default;
  inline constexpr Foo(const Foo<int> & v) noexcept = default;
  inline constexpr Foo(int v);
  
  using retType_12_5 = int;
  inline constexpr operator retType_12_5 () const
  {
    return this->raw;
  }
  
  inline constexpr Foo<int> & operator=(const Foo<int> & rhs) = default;
  inline Foo<int> & operator=(int v);
  
  inline volatile void operator=(int v);
  
  // inline ~Foo() noexcept = default;
};

#endif


/* First instantiated from: CharLiteralTest.cpp:60 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
struct Foo<char>
{
  char raw;
  inline Foo() noexcept = default;
  inline constexpr Foo(const Foo<char> & v) = default;
  inline constexpr Foo(char v);
  
  using retType_12_5 = char;
  inline constexpr operator retType_12_5 () const;
  
  inline constexpr Foo<char> & operator=(const Foo<char> & rhs) = default;
  inline Foo<char> & operator=(char v)
  {
    this->raw = v;
    return *this;
  }
  
  inline volatile void operator=(char v);
  
  // inline ~Foo() = default;
};

#endif


using Int  = Foo<int>;
using Char = Foo<char>;

class Test
{
  
  public: 
  inline void Apply()
  {
    Foo<char> * data = this->mData;
    data[static_cast<int>(this->GetLength().operator int()) + 1].operator=('\0');
    data[static_cast<int>(this->GetLength().operator int()) + 1].operator=('\n');
    data[static_cast<int>(this->GetLength().operator int()) + 1].operator=('\\');
    data[static_cast<int>(this->GetLength().operator int()) + 1].operator=('\'');
    data[static_cast<int>(this->GetLength().operator int()) + 1].operator=('\a');
    data[static_cast<int>(this->GetLength().operator int()) + 1].operator=('\b');
    data[static_cast<int>(this->GetLength().operator int()) + 1].operator=('\f');
    data[static_cast<int>(this->GetLength().operator int()) + 1].operator=('\r');
    data[static_cast<int>(this->GetLength().operator int()) + 1].operator=('\t');
    data[static_cast<int>(this->GetLength().operator int()) + 1].operator=('\v');
    data[static_cast<int>(this->GetLength().operator int()) + 1].operator=(static_cast<char>(L'\n'));
    data[static_cast<int>(this->GetLength().operator int()) + 1].operator=(u8'\n');
    data[static_cast<int>(this->GetLength().operator int()) + 1].operator=(static_cast<char>(u'\n'));
    data[static_cast<int>(this->GetLength().operator int()) + 1].operator=(static_cast<char>(U'\n'));
    data[static_cast<int>(this->GetLength().operator int()) + 1].operator=(3u);
    data[static_cast<int>(this->GetLength().operator int()) + 1].operator=(3ul);
    data[static_cast<int>(this->GetLength().operator int()) + 1].operator=(3ull);
    data[static_cast<int>(this->GetLength().operator int()) + 1].operator=(3ll);
    data[static_cast<int>(this->GetLength().operator int()) + 1].operator=(3l);
  }
  
  inline Foo<int> GetLength() const
  {
    return Foo<int>(this->mLength);
  }
  
  
  private: 
  Char mData[1024];
  Foo<int> mLength;
  public: 
  // inline constexpr Test(const Test &) = default;
  // inline constexpr Test(Test &&) = default;
  // inline constexpr Test & operator=(Test &&) = default;
  // inline Test() noexcept = default;
};



int main()
{
  Test t = Test();
  t.Apply();
}

