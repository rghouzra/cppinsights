#define INSIGHTS_USE_TEMPLATE

#include <vector>

template<typename T>
class MyVector
{
    std::vector<T> v;

public:
    // MyVector with initial size
    MyVector(const std::size_t n)
    : v(n)
    {
    }

    // MyVector with initial size and value
    MyVector(const std::size_t n, const double initialValue)
    : v(n, initialValue)
    {
    }

    // size of underlying container
    std::size_t size() const { return v.size(); }

    // index operators
    T operator[](const std::size_t i) const { return v[i]; }

    T& operator[](const std::size_t i) { return v[i]; }
};

/* First instantiated from: ClassOperatorHandler9Test.cpp:34 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
class MyVector<int>
{
  std::vector<int, std::allocator<int> > v;
  
  public: 
  inline MyVector(const std::size_t n)
  : v{std::vector<int, std::allocator<int> >(n)}
  {
  }
  
  inline MyVector(const std::size_t n, const double initialValue)
  : v{std::vector<int, std::allocator<int> >(n, static_cast<const int>(initialValue))}
  {
  }
  
  inline std::size_t size() const
  {
    return this->v.size();
  }
  
  inline int operator[](const std::size_t i) const
  {
    return this->v.operator[](i);
  }
  
  inline int & operator[](const std::size_t i)
  {
    return this->v.operator[](i);
  }
  
  // inline MyVector(const MyVector<int> &) = default;
  // inline MyVector(MyVector<int> &&) noexcept = default;
  // inline MyVector<int> & operator=(MyVector<int> &&) = default;
  // inline ~MyVector() noexcept = default;
};

#endif


using vec_t = MyVector<int>;

MyVector<int> operator+(const MyVector<int> & a, const MyVector<int> & b)
{
  vec_t result = MyVector<int>(a.size()) /* NRVO variable */;
  for(std::size_t s = 0; s <= a.size(); ++s) 
  {
    result.operator[](s) = a.operator[](s) + b.operator[](s);
  }
  
  return MyVector<int>(result);
}


template<typename T>
MyVector<T> operator*(const MyVector<T>& a, const MyVector<T>& b)
{
    MyVector<T> result(a.size());
    for(std::size_t s = 0; s <= a.size(); ++s) {
        result[s] = a[s] + b[s];
    }
    return result;
}

/* First instantiated from: ClassOperatorHandler9Test.cpp:70 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
MyVector<int> operator*<int>(const MyVector<int> & a, const MyVector<int> & b)
{
  MyVector<int> result = MyVector<int>(a.size()) /* NRVO variable */;
  for(std::size_t s = 0; s <= a.size(); ++s) 
  {
    result.operator[](s) = a.operator[](s) + b.operator[](s);
  }
  
  return MyVector<int>(result);
}
#endif


MyVector<int> Foo(const MyVector<int> & a, const MyVector<int> & b)
{
  vec_t result = MyVector<int>{a.size()} /* NRVO variable */;
  for(std::size_t s = 0; s <= a.size(); ++s) 
  {
    result.operator[](s) = a.operator[](s) + b.operator[](s);
  }
  
  return MyVector<int>(result);
}


int main()
{
  vec_t vecA = MyVector<int>(4, 2);
  vec_t vecB = MyVector<int>(6, 7);
  vec_t res = Foo(vecA, vecB);
  operator+(vecA, vecB);
  operator*(vecA, vecB);
}

