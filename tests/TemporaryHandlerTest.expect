#include <iostream>
using namespace std;

class A
{
  public: 
  // inline constexpr A() noexcept = default;
  // inline constexpr A(const A &) = default;
  // inline constexpr A(A &&) = default;
  // inline ~A() noexcept = default;
};



class B
{
  
  public: 
  using retType_11_9 = A;
  inline operator retType_11_9 () const
  {
    return A();
  }
  
  // inline constexpr B() noexcept = default;
  // inline ~B() noexcept = default;
  // inline constexpr B(const B &) = default;
  // inline constexpr B(B &&) = default;
};



class C : public B
{
  public: 
  // inline constexpr C() noexcept = default;
  // inline constexpr C(const C &) = default;
  // inline constexpr C(C &&) = default;
  // inline ~C() noexcept = default;
};



void foo(const A &)
{
  std::operator<<(std::cout, "A").operator<<(std::endl);
}


void foo(B &)
{
  std::operator<<(std::cout, "B").operator<<(std::endl);
}


int main()
{
  foo(static_cast<A>(static_cast<const B&>(C()).operator A()));
}
 

