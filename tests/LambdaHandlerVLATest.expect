#if 0
int Test(int n) 
{
    char buffer[n];


    [=]() mutable {
        int x = buffer[0];
    }();
}

int main()
{
    Test(2);
}
#endif


template<unsigned int TA>
struct SA
{
  SA (const int & PA);

 ~SA();

  bool Test();
  int nt;
};

/* First instantiated from: LambdaHandlerVLATest.cpp:59 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
struct SA<2>
{
  inline SA(const int & PA)
  {
    float e[this->nt];
        
    class __lambda_40_8
    {
      unsigned long;
      float (&e)[this->nt];
      public: 
      inline /*constexpr */ bool operator()(int i, int j) const
      {
        return e[i] < e[j];
      }
      
      public: __lambda_40_8(float (&_e)[this->nt])
      : e{_e}
      {}
      
    };
    
    test(__lambda_40_8{e});
  }
  
  ~SA() noexcept
  {
  }
  
  bool Test();
  
  int nt;
  // inline constexpr SA(const SA<2> &) = default;
};

#endif


template<typename TB>
inline void test(TB aa)
{
}

/* First instantiated from: LambdaHandlerVLATest.cpp:40 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
inline void test<__lambda_40_8>(__lambda_40_8 aa)
{
}
#endif


template<unsigned int TA>
inline SA<TA>::SA(const int & PA)
{
  float e[nt];
  
  test([&e](int i, int j){ return e[i] < e[j]; });
}

template<unsigned int TA>
SA<TA>::~SA()
{
}


template<unsigned int TA>
inline bool SA<TA>::Test()
{
    return false;
}


int main()
{
  int d;
  SA<2> iso = SA<2>(d);
}

