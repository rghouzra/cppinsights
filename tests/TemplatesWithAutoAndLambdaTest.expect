#define INSIGHTS_USE_TEMPLATE

#include <iostream>

// Example taken from Nicolai Josuttis slides
template<auto sep = ' ',
         typename T1, typename... Types>
void print(const T1& arg1, const Types&... args)
{
    std::cout << arg1;
    auto coutSpaceAndArg = [](const auto& arg) {
      std::cout << sep << arg;
      };

   // we end up here with multiple parameters named 'args'. Other than that it would compile    
   (..., coutSpaceAndArg(args));     
}

/* First instantiated from: TemplatesWithAutoAndLambdaTest.cpp:22 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
void print<32, char [3], double, std::basic_string<char> >(char const (&arg1)[3], const double & __args1, const std::basic_string<char> & __args2)
{
  std::operator<<(std::cout, arg1);
    
  class __lambda_11_28
  {
    public: inline /*constexpr */ void operator()(const double & arg) const
    {
      std::operator<<(std::cout, ' ').operator<<(arg);
    }
    public: inline /*constexpr */ void operator()(const std::basic_string<char> & arg) const
    {
      std::operator<<(std::operator<<(std::cout, ' '), arg);
    }
    
  };
  
  __lambda_11_28 coutSpaceAndArg = __lambda_11_28{};
  coutSpaceAndArg.operator()(__args1) , coutSpaceAndArg.operator()(__args2);
}
#endif


int main()
{
  std::string str = std::basic_string<char>("world");
  print("hi", 7.5, str);
}

