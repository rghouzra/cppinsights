class A
{
  
  public: 
  inline void SomeMethod()
  {
  }
  
};




template<class T, void(T::*SomeMethod)() = nullptr>
class B {


};

/* First instantiated from: TemplateWithNullptrTest.cpp:15 */
#ifdef INSIGHTS_USE_TEMPLATE
template<>
class B<A, void (A::*)()>
{
  public: 
  // inline constexpr B() noexcept = default;
  // inline constexpr B(const B<A, void (A::*)()> &) = default;
  // inline constexpr B(B<A, void (A::*)()> &&) = default;
};

#endif


B<A> b1 = B<A, void (A::*)()>();
 //OK
//B<A, static_cast<SomeMethod_t>(0)> b2; //OK
B<A, nullptr> b3 = B<A, void (A::*)()>();
 //OK
//B<A, 0> b4; // error: could not convert template argument ‘0’ to ‘void (A::*)()’

